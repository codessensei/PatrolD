stages:
  - build
  - deploy

variables:
  NODE_VERSION: "20"

build:
  stage: build
  image: node:${NODE_VERSION}
  tags:
    - self-hosted
  before_script:
    - apt-get update && apt-get install -y postgresql-client
  script:
    - npm ci
    - npm run build
    - ./build_deb.sh
  artifacts:
    paths:
      - dist/
      - patrold_1.0.0_all.deb
    expire_in: 1 week

deploy:
  stage: deploy
  image: node:${NODE_VERSION}
  tags:
    - self-hosted
  before_script:
    - apt-get update && apt-get install -y postgresql-client
  script:
    - export DATABASE_URL="${DATABASE_URL}"
    - export PGUSER="${PGUSER}"
    - export PGPASSWORD="${PGPASSWORD}"
    - export PGHOST="${PGHOST}"
    - export PGPORT="${PGPORT}"
    - export PGDATABASE="${PGDATABASE}"
    - export TELEGRAM_BOT_TOKEN="${TELEGRAM_TOKEN}"
    - export SESSION_SECRET="${SESSION_SECRET}"
    - npm ci
    # Initialize database variables
    - export PGPASSWORD="${PGPASSWORD}"
    - export PGHOST="${PGHOST}"
    - export PGPORT="${PGPORT}"
    - export PGUSER="${PGUSER}"
    - export PGDATABASE="${PGDATABASE}"
    - export DATABASE_URL="${DATABASE_URL}"
    
    # 1. Attempt to connect to PostgreSQL
    - echo "Attempting to connect to PostgreSQL server..."
    - if ! psql -c "SELECT 1;" > /dev/null 2>&1; then
        echo "Could not connect to PostgreSQL server. Checking if database exists...";
        
        # 2. Create database if it doesn't exist (using template1 which should always exist)
        if ! psql -d template1 -c "SELECT 1 FROM pg_database WHERE datname = '$PGDATABASE'" | grep -q 1; then
          echo "Database $PGDATABASE does not exist. Attempting to create...";
          psql -d template1 -c "CREATE DATABASE $PGDATABASE;" || echo "Failed to create database, but continuing...";
        else
          echo "Database $PGDATABASE exists.";
        fi;
      fi
      
    # 3. Create schema if it doesn't exist (with proper error handling)
    - echo "Creating schema if it doesn't exist..."
    - psql -c "CREATE SCHEMA IF NOT EXISTS public;" || echo "Schema creation failed, but continuing..."
    
    # 4. Verify drizzle.config.ts exists
    - |
      if [ ! -f "drizzle.config.ts" ]; then
        echo "drizzle.config.ts not found. Continuing anyway, will use DATABASE_URL from environment."
      fi
    
    # 5. Create a custom migration script that handles the DATABASE_URL check
    - echo "Creating temporary database migration script..."
    - |
      cat > run-migrations.js << 'EOF'
      const { execSync } = require('child_process');

      try {
        // Check if DATABASE_URL is set
        if (!process.env.DATABASE_URL) {
          console.error("ERROR: DATABASE_URL environment variable is not set");
          console.error("Setting up DATABASE_URL from individual PostgreSQL variables");
          
          // Construct from individual parts
          const pgUser = process.env.PGUSER || 'postgres';
          const pgPassword = process.env.PGPASSWORD || '';
          const pgHost = process.env.PGHOST || 'localhost';
          const pgPort = process.env.PGPORT || '5432';
          const pgDatabase = process.env.PGDATABASE || 'postgres';
          
          process.env.DATABASE_URL = `postgres://${pgUser}:${pgPassword}@${pgHost}:${pgPort}/${pgDatabase}`;
          console.log(`Using constructed DATABASE_URL: postgres://${pgUser}:***@${pgHost}:${pgPort}/${pgDatabase}`);
        } else {
          console.log("Using provided DATABASE_URL");
        }
        
        // Run the migrations
        console.log("Running database migrations...");
        execSync('npx drizzle-kit push', { stdio: 'inherit' });
        console.log("Migrations completed successfully");
        process.exit(0);
      } catch (error) {
        console.error("Migration failed:", error.message);
        console.error("Continuing deployment despite migration failure");
        process.exit(0); // Exit with success to continue pipeline
      }
      EOF

    # 6. Run our custom migration script
    - echo "Running database migrations with error handling..."
    - node run-migrations.js
    - cp patrold_1.0.0_all.deb /var/www/html/ || echo "Warning: Failed to copy Debian package to web directory"
    - npm install -g pm2
    - pm2 restart patrold || pm2 start npm --name "patrold" -- start
    - pm2 save
  only:
    - main